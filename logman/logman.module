<?php
/**
 * @file
 * Logman module file.
 */

use Drupa\logman\Helper\LogmanWatchdogSearch;
use Drupa\logman\Helper\LogmanApacheSearch;

/**
 * Implements hook_page_alter().
 *
 * Insert the logman on page statistics at
 * the default bottom right hand side corner.
 */
function logman_page_alter(&$page) {
  if (logman_visibility() === TRUE) {
    $logman_page_statistics = logman_get_page_statistics();
    $page['page_bottom']['logman']['#attached']['library'][] = 'logman/logman-page-statistics';
    $page['page_bottom']['logman']['#attached']['#markup'] = \Drupal::service('renderer')->render($logman_page_statistics);
  }
}

/**
 * Implements hook_theme().
 */
function logman_theme($existing, $type, $theme, $path) {
  return array(
    'logman_area' => array(
      'template' => 'theme/logman_area',
      'variables' => array('logman_page_statistics' => NULL, 'log_class' => NULL),
    ),
  );
}

/**
 * Helper function to get the themed statistics.
 *
 * @return array
 *   Themed page statistics.
 */
function logman_get_page_statistics() {
  // Include the log operation class.
  module_load_include('php', 'logman', 'includes/lib/LogmanWatchdogSearch');

  $statistics_duration = \Drupal::config('logman.settings')->get('logman_page_statistics_duration');
  $statistics_duration_unit = \Drupal::config('logman.settings')->get('logman_page_statistics_duration_unit');
  // Prepare date range array.
  switch ($statistics_duration_unit) {
    case 'hours':
      $date_range = array((time() - ($statistics_duration * 60 * 60)), time());
      break;

    case 'days':
      $date_range = array((time() - ($statistics_duration * 24 * 60 * 60)), time());
      break;

    default:
      $date_range = array();
  }

  $url = url(current_path(), array('absolute' => TRUE));
  $watchdog = new LogmanWatchdogSearch();
  $statistics = $watchdog->getPageStatistics($url, $date_range);
  // Theme the statistics.
  $duration_token = array(
    '@duration' => $statistics_duration,
    '@unit' => $statistics_duration_unit,
  );
  if (!empty($statistics)) {
    // Severity levels.
    $severity_levels = watchdog_severity_levels();
    $themed_statistics_details = array();
    foreach ($statistics as $item) {
      $error_type = ucwords($severity_levels[$item->severity]);
      $error_count = $item->count;
      $options = array(
        'query' => array(
          'location' => $url,
          'date_from' => array(
            'date' => isset($date_range[0]) ? date('Y-m-d', $date_range[0]) : '',
            'time' => isset($date_range[0]) ? date('H:i:s', $date_range[0]) : '',
          ),
          'date_to' => array(
            'date' => isset($date_range[1]) ? date('Y-m-d', $date_range[1]) : '',
            'time' => isset($date_range[1]) ? date('H:i:s', $date_range[1]) : '',
          ),
          'severity' => $item->severity,
        ),
      );

      $url = Url::fromRoute('logman.statistics_form', $options);
      $themed_statistics_details[] = Link::fromTextAndUrl("$error_count $error_type", $url);
    }
    $statistics_class = $severity_levels[$statistics[0]->severity];
    end($themed_statistics_details);
    $themed_statistics_details[key($themed_statistics_details)] .= ' ' . t('since last @duration @unit', $duration_token);
    $themed_statistics = '<div class="statistics_item">' . implode(',</div><div class="statistics_item">', $themed_statistics_details) . '</div></div>';
  }
  else {
    $statistics_class = 'no_errors';
    $themed_statistics = '<div>' . t('No errors on this page since last @duration @unit', $duration_token) . '</div>';
  }

  return array(
    'logman_page_statistics' => $themed_statistics,
    'log_class' => 'lm_' . $statistics_class,
  );
}

/**
 * Helper function for visibility check.
 *
 * Decide whether or not to display the survey on a particular path.
 *
 * @return bool
 *   Visibility decision.
 */
function logman_visibility() {
  if (\Drupal::currentUser()->hasPermission('access logman') && \Drupal::config('logman.settings')->get('logman_show_page_statistics') == 1) {
    return TRUE;
  }
}

/**
 * Helper function to populate form state from $_GET values.
 *
 * This is for using pagination that passes data as query string.
 *
 * @param array $field_keys
 *   The search field keys.
 * @param array $form_state
 *   The form_state array.
 */
function logman_prepare_form_state($field_keys, &$form_state) {
  foreach ($field_keys as $key) {
    if (isset($_GET[$key]) && !isset($form_state['values'][$key])) {
      $form_state['values'][$key] = $_GET[$key];
    }
  }

  // Properly format the date range values into form_state
  // if it is not formatted to a string.
  if (!empty($form_state['values']['date_from']) && is_array($form_state['values']['date_from'])) {
    $form_state['values']['date_from'] = trim(implode(' ', $form_state['values']['date_from']));
  }
  if (!empty($form_state['values']['date_to']) && is_array($form_state['values']['date_to'])) {
    $form_state['values']['date_to'] = trim(implode(' ', $form_state['values']['date_to']));
  }
}

/**
 * Helper function to prepare statistics chart data.
 *
 * This returns a string in javascript array format.
 *
 * @param array $data
 *   Statistics data.
 * @param string $log_type
 *   Log type watchdog or apache.
 * @param string $against
 *   Entity on which the lg statistics is based.
 *
 * @return string
 *   JS array formatted string for chart data.
 */
function logman_prapare_chartable_data($data, $log_type, $against) {
  // Severity levels.
  $severity_levels = watchdog_severity_levels();
  $chart_data = array("['$against', 'Counts']");
  foreach ($data as $key => $item) {
    if ($log_type == 'watchdog') {
      if ($against == 'severity') {
        $key = ucwords($severity_levels[$item->$against]);
      }
      else {
        $key = ucwords($item->$against);
      }
      $chart_data[] = "['$key', " . $item->count . "]";
    }
    else {
      $chart_data[] = "['$key', $item]";
    }
  }
  return $chart_data = "[" . implode(', ', $chart_data) . "]";
}


/**
 * Submit handler for graylog2/gelf log reset.
 */
function logman_settings_form_gelf_reset(&$form, &$form_state) {
  $form_state['storage']['confirm'] = TRUE;
}